#include "mbed.h"
#include "stm32746g_discovery_audio.h"
#include "stm32746g_discovery_sdram.h"
#include "math.h" 

typedef enum {
    BUFFER_OFFSET_NONE = 0,
    BUFFER_OFFSET_HALF = 1,
    BUFFER_OFFSET_FULL = 2,
} BUFFER_StateTypeDef;

#define AUDIO_BLOCK_SIZE   ((uint32_t)512)
#define AUDIO_BUFFER_IN     SDRAM_DEVICE_ADDR
#define AUDIO_BUFFER_OUT   (AUDIO_BUFFER_IN + (AUDIO_BLOCK_SIZE * 2))

int volume = 10;

volatile uint32_t  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
    
    uint16_t * ptrMEM;

int main()
{
    //printf("\n\nAUDIO LOOPBACK EXAMPLE START:\n");
    int note;
    int y=0;
    int i;
    int freqcarre= 900;

    BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2, OUTPUT_DEVICE_HEADPHONE, DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
    printf("AUDIO loop from digital micro (U20 & U21 components on board) to headphone (CN10 jack connector)\n");


    /* Initialize SDRAM buffers 
    AUDIO_BUFFER_IN et AUDIO_BUFFER_OUT font 2x la taille de AUDIO BLOC SIZE*/
    BSP_SDRAM_Init();
    memset((uint16_t *)AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE * 2);
    memset((uint16_t *)AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE * 2);
    printf("SDRAM init done\n");

    //audio_rec_buffer_state = BUFFER_OFFSET_NONE;

    //Start Recording 
    if (BSP_AUDIO_IN_Record((uint16_t *)AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE) != AUDIO_OK) {
        printf("BSP_AUDIO_IN_Record error\n");
    }

    /* Start Playback */
    BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
    if (BSP_AUDIO_OUT_Play((uint16_t *)AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE * 2) != AUDIO_OK) {
        printf("BSP_AUDIO_OUT_Play error\n");
    }

    while (1) {
        /*On pointe à l'adresse de AUDIO_BUFFER_OUT pour écrire sur la mémoire */
        ptrMEM = (uint16_t *)AUDIO_BUFFER_OUT;
        
        /*
        y=0;for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {  
            if(y<2){
                *(ptrMEM + i)= 0;
                y++;
            }
            else if(y>2&&y<4){
                *(ptrMEM + i)= 0;
                y++;
            }
            else if(y>=4){
                y=0;
            }
        }*/
        /* on génère un signal sinusoïdal dont l'amplitude est le volume et le nombre d'échantillons est la fréquence*/
        //on fait un switch case pour chaque note 
        /*switch (note)
        {
            case 1: for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {
            *(ptrMEM + i)= 500*sin(2*3.14159*250.0*i/30000.0);
            
            } ;
            break;
            case 2: for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {
            *(ptrMEM + i)= 500*sin(2*3.14159*265.0*i/30000.0);
            
            };
            break;
            case 3: for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {
            *(ptrMEM + i)= 500*sin(2*3.14159*280.0*i/30000.0);
            
            };
            break;
            case 4: for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {
            *(ptrMEM + i)= 500*sin(2*3.14159*300.0*i/30000.0);
            
            };
            break;
            case 5: for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {
            *(ptrMEM + i)= 500*sin(2*3.14159*310.0*i/30000.0);
            
            };
            break;
            case 6: for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {
            *(ptrMEM + i)= 500*sin(2*3.14159*320.0*i/30000.0);
            
            };
            break;
            case 7: for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {
            *(ptrMEM + i)= 500*sin(2*3.14159*350.0*i/30000.0);
            
            };
            break;
            case 8: for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {
            *(ptrMEM + i)= 500*sin(2*3.14159*370.0*i/30000.0);
            
            };
            break;
            case 9: for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {
            *(ptrMEM + i)= 500*sin(2*3.14159*390.0*i/30000.0);
            
            };
            break;
            case 10: for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {
            *(ptrMEM + i)= 500*sin(2*3.14159*410.0*i/30000.0);
            
            };
            break;
            case 11: for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {
            *(ptrMEM + i)= 500*sin(2*3.14159*430.0*i/30000.0);
            
            };
            break;
            case 12: for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {
            *(ptrMEM + i)= 500*sin(2*3.14159*460.0*i/30000.0);
            
            };
            break;
            case 13: for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {
            *(ptrMEM + i)= 500*sin(2*3.14159*495.0*i/30000.0);
            
            };
            break;
            
            default :
            printf("en attente de commande");
            
            break;
        }*/
        
        
        
        for (i=0;i<AUDIO_BLOCK_SIZE*2;i++)
        {
            if(i<freqcarre/2){
                *(ptrMEM + i)= 500;
                y++;
            }
            else if((i>freqcarre/2)&&(i<freqcarre))
            {
                *(ptrMEM + i)= 0;
                y++;
            }
            else if(i>freqcarre){
                y=0;
            }
                            
           // *(ptrMEM + i)= 500*sin(2*3.14159*550.0*i/30000.0);
            }
            
        
        /* Wait end of half block recording 
        while (audio_rec_buffer_state == BUFFER_OFFSET_HALF) {
        }
        audio_rec_buffer_state = BUFFER_OFFSET_NONE;
        
        ptrMEM = (uint16_t *)AUDIO_BUFFER_IN;
        
        //écriture première moitié de buffer IN
        y=0;
        for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {  
            if(y<30){
                *(ptrMEM + i)= 0;
                y++;
            }
            else if(y>30&&y<60){
                *(ptrMEM + i)= 0;
                y++;
            }
            else if(y>=60){
                y=0;
            }
        }

        // Copy de la première moitié du buffer IN dans seconde moitié Buffer OUT
        memcpy((uint16_t *)(AUDIO_BUFFER_OUT), (uint16_t *)(AUDIO_BUFFER_IN), AUDIO_BLOCK_SIZE);

        // Wait end of one block recording 
        while (audio_rec_buffer_state == BUFFER_OFFSET_FULL) {
        }
        audio_rec_buffer_state = BUFFER_OFFSET_NONE;
        
        ptrMEM = (uint16_t *)(AUDIO_BUFFER_IN + AUDIO_BLOCK_SIZE);
        
        //écriture seconde moitié de buffer IN
        for (i=0;i<AUDIO_BLOCK_SIZE;i++)
        {  
            if(y<30){
                *(ptrMEM + (AUDIO_BLOCK_SIZE) + i)= 0;
                y++;
            }
            else if(y>30&&y<60){
                *(ptrMEM +(AUDIO_BLOCK_SIZE) + i)= 0;
                y++;
            }
            else if(y>=60){
                y=0;
            }
        }

        //Copy de la seconde moitié du buffer IN dans seconde moitié Buffer OUT 
        memcpy((uint16_t *)(AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)), (uint16_t *)(AUDIO_BUFFER_IN + (AUDIO_BLOCK_SIZE)), AUDIO_BLOCK_SIZE);
        */
        
    }
}


/*-------------------------------------------------------------------------------------
       Callbacks implementation:
           the callbacks API are defined __weak in the stm32746g_discovery_audio.c file
           and their implementation should be done in the user code if they are needed.
           Below some examples of callback implementations.
  -------------------------------------------------------------------------------------*/
/**
  * @brief Manages the DMA Transfer complete interrupt.
  * @param None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
    audio_rec_buffer_state = BUFFER_OFFSET_FULL;
}

/**
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
    audio_rec_buffer_state = BUFFER_OFFSET_HALF;
}

/**
  * @brief  Audio IN Error callback function.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_Error_CallBack(void)
{
    printf("BSP_AUDIO_IN_Error_CallBack\n");
}
